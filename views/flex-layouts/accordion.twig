<style scoped>

  summary {
    padding: 1em;
    text-align: left;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    border: 1px solid currentColor;
  }

  details {
    border: 1px solid currentColor;
  }

  summary:hover {
      cursor: pointer;
  }

  /* Remove default marker for Safari */
  summary::-webkit-details-marker {
    display: none;
    width: 0.66em;
    height: 0.66em;
    margin-inline-end: 0em;
  }

  /* Remove marker for Chrome */
  summary::marker {
    content: "";
    display: none;
  }

  /* Add open icon */
  summary:after {
    content: "\002B";
    text-align: right;
  }

  /* Add close icon */
  details[open] > summary:after {
    content: "\2212"; 
  }

</style>



<section class="accordion {% if layout.classes %} {{ layout.classes }} {% endif %} {{ layout.colour }}" {% if layout.section_id %} id="{{ layout.section_id }}" {% endif %} data-accordion>
  {% if layout.heading %}<h2>{{ layout.heading }}</h2>{% endif %}
    {% for q_a in layout.accordion %}
        <details>
            <summary class="">
                <span> {{ q_a.question }} </span>
            </summary>
            <div class="details content">{{ q_a.answer }}</div>
        </details>
    {% endfor %}
</section>



{% block script_accordion %}        
<script type="text/javascript">
    
function toggleHandler (event) {

// Only run if accordion is open
if (!event.target.hasAttribute('open')) return;

// Only run on accordions inside our selector
let parent = event.target.closest('[data-accordion]');
if (!parent) return;

// Get all open accordions inside parent
let opened = parent.querySelectorAll('details[open]');

// Close open ones that aren't current accordion
for (let accordion of opened) {
    if (accordion === event.target) continue;
    accordion.removeAttribute('open');
}

}

document.addEventListener('toggle', toggleHandler, true);





class Accordion {
constructor(el) {
  // Store the <details> element
  this.el = el;
  // Store the <summary> element
  this.summary = el.querySelector('summary');
  // Store the <div class="content"> element
  this.content = el.querySelector('.content');

  // Store the animation object (so we can cancel it if needed)
  this.animation = null;
  // Store if the element is closing
  this.isClosing = false;
  // Store if the element is expanding
  this.isExpanding = false;
  // Detect user clicks on the summary element
  this.summary.addEventListener('click', (e) => this.onClick(e));
}

onClick(e) {
  // Stop default behaviour from the browser
  e.preventDefault();
  // Add an overflow on the <details> to avoid content overflowing
  this.el.style.overflow = 'hidden';
  // Check if the element is being closed or is already closed
  if (this.isClosing || !this.el.open) {
    this.open();
  // Check if the element is being openned or is already open
  } else if (this.isExpanding || this.el.open) {
    this.shrink();
  }
}

shrink() {
  // Set the element as "being closed"
  this.isClosing = true;
  
  // Store the current height of the element
  const startHeight = `${this.el.offsetHeight}px`;
  // Calculate the height of the summary
  const endHeight = `${this.summary.offsetHeight}px`;
  
  // If there is already an animation running
  if (this.animation) {
    // Cancel the current animation
    this.animation.cancel();
  }
  
  // Start a WAAPI animation
  this.animation = this.el.animate({
    // Set the keyframes from the startHeight to endHeight
    height: [startHeight, endHeight]
  }, {
    duration: 400,
    easing: 'ease-out'
  });
  
  // When the animation is complete, call onAnimationFinish()
  this.animation.onfinish = () => this.onAnimationFinish(false);
  // If the animation is cancelled, isClosing variable is set to false
  this.animation.oncancel = () => this.isClosing = false;
}

open() {
  // Apply a fixed height on the element
  this.el.style.height = `${this.el.offsetHeight}px`;
  // Force the [open] attribute on the details element
  this.el.open = true;
  // Wait for the next frame to call the expand function
  window.requestAnimationFrame(() => this.expand());
}

expand() {
  // Set the element as "being expanding"
  this.isExpanding = true;
  // Get the current fixed height of the element
  const startHeight = `${this.el.offsetHeight}px`;
  // Calculate the open height of the element (summary height + content height)
  const endHeight = `${this.summary.offsetHeight + this.content.offsetHeight}px`;
  
  // If there is already an animation running
  if (this.animation) {
    // Cancel the current animation
    this.animation.cancel();
  }
  
  // Start a WAAPI animation
  this.animation = this.el.animate({
    // Set the keyframes from the startHeight to endHeight
    height: [startHeight, endHeight]
  }, {
    duration: 400,
    easing: 'ease-out'
  });
  // When the animation is complete, call onAnimationFinish()
  this.animation.onfinish = () => this.onAnimationFinish(true);
  // If the animation is cancelled, isExpanding variable is set to false
  this.animation.oncancel = () => this.isExpanding = false;
}

onAnimationFinish(open) {
  // Set the open attribute based on the parameter
  this.el.open = open;
  // Clear the stored animation
  this.animation = null;
  // Reset isClosing & isExpanding
  this.isClosing = false;
  this.isExpanding = false;
  // Remove the overflow hidden and the fixed height
  this.el.style.height = this.el.style.overflow = '';
}
}

document.querySelectorAll('details').forEach((el) => {
new Accordion(el);
});

/**
* Handle toggle events
* @param  {Event} event The Event object
*/


</script>
{% endblock script_accordion %}